"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int

  _gt: Int

  _gte: Int

  _in: [Int!]

  _is_null: Boolean

  _lt: Int

  _lte: Int

  _neq: Int

  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String

  _gt: String

  _gte: String

  """
  does the column match the given case-insensitive pattern
  """
  _ilike: String

  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String

  _is_null: Boolean

  """
  does the column match the given pattern
  """
  _like: String

  _lt: String

  _lte: String

  _neq: String

  """
  does the column NOT match the given case-insensitive pattern
  """
  _nilike: String

  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """
  does the column NOT match the given pattern
  """
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """
  does the column NOT match the given SQL regular expression
  """
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """
  does the column match the given SQL regular expression
  """
  _similar: String
}

"""
ordering argument of a cursor
"""
enum cursor_ordering {
  """
  ascending ordering of the cursor
  """
  ASC

  """
  descending ordering of the cursor
  """
  DESC
}

"""
mutation root
"""
type mutation_root {
  """
  insert data into the table: "reads"
  """
  insert_reads("the rows to be inserted" objects: [reads_insert_input!]!, "upsert condition" on_conflict: reads_on_conflict): reads_mutation_response

  """
  insert a single row into the table: "reads"
  """
  insert_reads_one("the row to be inserted" object: reads_insert_input!, "upsert condition" on_conflict: reads_on_conflict): reads

  """
  update data of the table: "reads"
  """
  update_reads("increments the numeric columns with given value of the filtered values" _inc: reads_inc_input, "sets the columns of the filtered rows to the given values" _set: reads_set_input, "filter the rows which have to be updated" where: reads_bool_exp!): reads_mutation_response

  """
  update single row of the table: "reads"
  """
  update_reads_by_pk("increments the numeric columns with given value of the filtered values" _inc: reads_inc_input, "sets the columns of the filtered rows to the given values" _set: reads_set_input, pk_columns: reads_pk_columns_input!): reads

  """
  update multiples rows of table: "reads"
  """
  update_reads_many("updates to execute, in order" updates: [reads_updates!]!): [reads_mutation_response]
}

"""
column ordering options
"""
enum order_by {
  """
  in ascending order, nulls last
  """
  asc

  """
  in ascending order, nulls first
  """
  asc_nulls_first

  """
  in ascending order, nulls last
  """
  asc_nulls_last

  """
  in descending order, nulls first
  """
  desc

  """
  in descending order, nulls first
  """
  desc_nulls_first

  """
  in descending order, nulls last
  """
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "reads"
  """
  reads("distinct select on columns" distinct_on: [reads_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [reads_order_by!], "filter the rows returned" where: reads_bool_exp): [reads!]!

  """
  fetch data from the table: "reads" using primary key columns
  """
  reads_by_pk(slug: String!): reads
}

"""
columns and relationships of "reads"
"""
type reads {
  read_count: Int!

  slug: String!
}

"""
Boolean expression to filter rows from the table "reads". All fields are combined with a logical 'AND'.
"""
input reads_bool_exp {
  _and: [reads_bool_exp!]

  _not: reads_bool_exp

  _or: [reads_bool_exp!]

  read_count: Int_comparison_exp

  slug: String_comparison_exp
}

"""
unique or primary key constraints on table "reads"
"""
enum reads_constraint {
  """
  unique or primary key constraint on columns "slug"
  """
  reads_pkey
}

"""
input type for incrementing numeric columns in table "reads"
"""
input reads_inc_input {
  read_count: Int
}

"""
input type for inserting data into table "reads"
"""
input reads_insert_input {
  read_count: Int

  slug: String
}

"""
response of any mutation on the table "reads"
"""
type reads_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [reads!]!
}

"""
on_conflict condition type for table "reads"
"""
input reads_on_conflict {
  constraint: reads_constraint!

  update_columns: [reads_update_column!]! = []

  where: reads_bool_exp
}

"""
Ordering options when selecting data from "reads".
"""
input reads_order_by {
  read_count: order_by

  slug: order_by
}

"""
primary key columns input for table: reads
"""
input reads_pk_columns_input {
  slug: String!
}

"""
select columns of table "reads"
"""
enum reads_select_column {
  """
  column name
  """
  read_count

  """
  column name
  """
  slug
}

"""
input type for updating data in table "reads"
"""
input reads_set_input {
  read_count: Int
}

"""
Streaming cursor of the table "reads"
"""
input reads_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: reads_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input reads_stream_cursor_value_input {
  read_count: Int

  slug: String
}

"""
update columns of table "reads"
"""
enum reads_update_column {
  """
  column name
  """
  read_count
}

input reads_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: reads_inc_input

  """
  sets the columns of the filtered rows to the given values
  """
  _set: reads_set_input

  where: reads_bool_exp!
}

type subscription_root {
  """
  fetch data from the table: "reads"
  """
  reads("distinct select on columns" distinct_on: [reads_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [reads_order_by!], "filter the rows returned" where: reads_bool_exp): [reads!]!

  """
  fetch data from the table: "reads" using primary key columns
  """
  reads_by_pk(slug: String!): reads

  """
  fetch data from the table in a streaming manner : "reads"
  """
  reads_stream("maximum number of rows returned in a single batch" batch_size: Int!, "cursor to stream the results returned by the query" cursor: [reads_stream_cursor_input]!, "filter the rows returned" where: reads_bool_exp): [reads!]!
}

schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}
